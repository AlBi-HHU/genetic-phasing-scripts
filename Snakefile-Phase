# Settings for data
REGIONS = ['chr3.60Mx', 'chr4.71Mx', 'chr5.56Mx']
REFNAME = 'StSOLv1.1'
CHROMOSOMES = ['ch03', 'ch04', 'ch05']
COMPLEXITY_LEVELS = [0, 2]
WINDOW_SIZES = [250]
CUTOFFS = [0]
BLOCKSENS = [1]
VARIANTS = ['', '.simplexonly']
SAMPLE = 'Altus_470bp'

# Path to data
PARENTPATH = '/srv/homes/schrinner/data/geneticphasing/parents/'
PROGENYPATH = '/srv/homes/schrinner/data/geneticphasing/progeny/'
CCSPATH = '/srv/homes/schrinner/data/geneticphasing/ccs-reads/'
REFPATH = '/srv/homes/schrinner/data/geneticphasing/reference/SolyntusV1.1.fasta'
OUTPUTPATH = 'output/'
PEDFILE = '/srv/homes/schrinner/whatshap/whatshap-genetic/ped.txt'


rule all:
    input:
        expand('{}{{region}}.genetic.altus.c{{complexity}}.w{{window}}.cut{{cutoff}}.new14.vcf'.format(OUTPUTPATH), region=REGIONS, complexity=COMPLEXITY_LEVELS, window=WINDOW_SIZES, cutoff=CUTOFFS),
        #expand('{}{{region}}.whpp.altus{{variants}}.B{{blocksens}}.vcf'.format(OUTPUTPATH), region=REGIONS, variants=VARIANTS, blocksens=BLOCKSENS),
        #expand('{}{{region}}.hpop.altus{{variants}}.vcf'.format(OUTPUTPATH), region=REGIONS, variants=VARIANTS),
        #expand('{}{{region}}.flopp.altus{{variants}}.c.vcf'.format(OUTPUTPATH), region=REGIONS, variants=VARIANTS),
        #expand('{}{{region}}.flopp.altus{{variants}}.v.vcf'.format(OUTPUTPATH), region=REGIONS, variants=VARIANTS)

rule genetic_phase:
    input:
        parent=PARENTPATH+'{region}.parents.decluttered.vcf',
        progeny=PROGENYPATH+'{region}.progeny.decluttered.vcf.gz',
        pedfile=PEDFILE
    output:
        OUTPUTPATH+'{region}.genetic.altus.c{complexity}.w{window}.cut{cutoff}.new14.vcf'
    shell:
        'whatshap polyphasegenetic {input.parent} {input.pedfile} -P {input.progeny} -p 4 -o {output} --sample Altus_470bp -C {wildcards.complexity} --scoring-window {wildcards.window} --ratio-cutoff {wildcards.cutoff} --distrust-parent-genotypes'
        
rule simplexonly:
    input:
        OUTPUTPATH+'{region}.genetic.altus.c0.w250.cut0.new14.vcf'
    output:
        PARENTPATH+'{region}.parents.decluttered.simplexonly.vcf'
    shell:
        "grep '[|#]' {input} > {output}"

rule polyphase:
    input:
        vcf=PARENTPATH+'{region}.parents.decluttered{variants,.*}.vcf',
        bam=CCSPATH+'{region}.ccs.altus.bam'
    output:
        OUTPUTPATH+'{region}.whpp.altus{variants,.*}.B{blocksens}.vcf'
    shell:
        'whatshap polyphase {input.vcf} {input.bam} -o {output} -p 4 --sample Altus_470bp --ignore-read-groups -B {wildcards.blocksens}'

rule hpop:
    input:
        vcf=OUTPUTPATH+'temp/{region}.parents.decluttered.singlesample{variants,.*}.vcf',
        bam=CCSPATH+'{region}.ccs.altus.bam'
    output:
        OUTPUTPATH+'temp/{region}.hpop.altus{variants,.*}.txt'
    resources:
        hpop=1
    shell:
        'java -jar H-PoPG-v-0.1.2.jar -v {input.vcf} -b {input.bam} -o {output} -p 4'

rule hpop2vcf:
    input:
        vcf=OUTPUTPATH+'temp/{region}.parents.decluttered.singlesample{variants,.*}.vcf',
        hpop=OUTPUTPATH+'temp/{region}.hpop.altus{variants,.*}.txt'
    output:
        OUTPUTPATH+'{region}.hpop.altus{variants,.*}.vcf'
    shell:
        'python hpop2vcf.py {input.hpop} {input.vcf} {output}'

rule flopp:
    input:
        vcf=OUTPUTPATH+'temp/{region}.parents.decluttered.singlesample{variants,.*}.vcf',
        bam=CCSPATH+'{region}.ccs.altus.bam'
    output:
        OUTPUTPATH+'temp/{region}.flopp.altus{variants,.*}.{mode}.txt'
    shell:
        './flopp/target/release/flopp -b {input.bam} -{wildcards.mode} {input.vcf} -o {output} -t 1 -p 4'

rule flopp2vcf:
    input:
        vcf=OUTPUTPATH+'temp/{region}.parents.decluttered.singlesample{variants,.*}.vcf',
        flopp=OUTPUTPATH+'temp/{region}.flopp.altus{variants,.*}.{mode}.txt'
    output:
        OUTPUTPATH+'{region}.flopp.altus{variants,.*}.{mode}.vcf'
    shell:
        'python flopp2vcf.py {input.flopp} {input.vcf} {output}'
        
rule filter_single_samples_biallelic:
    input:
        PARENTPATH+'{region}.parents.decluttered{variants,.*}.vcf'
    output:
        OUTPUTPATH+'temp/{region}.parents.decluttered.singlesample{variants,.*}.vcf'
    run:
        shell('cp {input} {output}.orig')
        shell('bgzip < {output}.orig > {output}.orig.gz')
        shell('bcftools index {output}.orig.gz')
        shell('bcftools view -s '+SAMPLE+' {output}.orig.gz -o {output}.gz --max-alleles 2')
        shell('rm {output}.orig')
        shell('rm {output}.orig.gz')
        shell('rm {output}.orig.gz.csi')
        shell('bgzip -d < {output}.gz > {output}')
        shell('rm {output}.gz')